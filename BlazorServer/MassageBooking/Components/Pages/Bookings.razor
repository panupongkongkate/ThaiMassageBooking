@page "/bookings"
@using MassageBooking.Models
@using MassageBooking.Services
@inject BookingService BookingService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î</PageTitle>

<div class="bookings-container">
    <div class="bookings-header">
        <h1 class="page-title">
            <span class="title-icon">üìÖ</span>
            ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        </h1>
        <p class="page-subtitle">‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
        <button class="refresh-btn" @onclick="LoadBookings" disabled="@isLoading" style="margin-top: 10px;">
            @if (isLoading)
            {
                <span>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</span>
            }
            else
            {
                <span>üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</span>
            }
        </button>
    </div>

    <!-- Month/Year Selector -->
    <div class="date-selector-container">
        <div class="date-selector">
            <div class="selector-group">
                <label class="selector-label">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
                <select class="month-select" @bind="selectedMonth" @bind:event="onchange" @bind:after="OnDateChanged">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@Constants.GetThaiMonth(i)</option>
                    }
                </select>
            </div>
            <div class="selector-group">
                <label class="selector-label">‡∏õ‡∏µ</label>
                <select class="year-select" @bind="selectedYear" @bind:event="onchange" @bind:after="OnDateChanged">
                    @for (int year = currentYear - 1; year <= currentYear + 1; year++)
                    {
                        <option value="@year">@Constants.GetThaiYear(year)</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <!-- Bookings Content -->
    <div class="bookings-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p class="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-container">
                <div class="error-message">
                    <span class="error-icon">‚ö†Ô∏è</span>
                    @errorMessage
                </div>
                <button class="retry-btn" @onclick="LoadBookings">
                    ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </button>
            </div>
        }
        else if (bookings.Count == 0)
        {
            <div class="empty-container">
                <div class="empty-icon">üìã</div>
                <h3 class="empty-title">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</h3>
                <p class="empty-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô @Constants.GetThaiMonth(selectedMonth) @Constants.GetThaiYear(selectedYear)</p>
                <button class="book-now-btn" @onclick="GoToBooking">
                    ‡∏à‡∏≠‡∏á‡πÄ‡∏•‡∏¢
                </button>
            </div>
        }
        else
        {
            <div class="bookings-stats">
                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-info">
                        <div class="stat-value">@bookings.Count</div>
                        <div class="stat-label">‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                    </div>
                </div>
            </div>

            <div class="bookings-table-container">
                <div class="table-header">
                    <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á @Constants.GetThaiMonth(selectedMonth) @Constants.GetThaiYear(selectedYear)</h3>
                </div>
                
                <div class="bookings-grid">
                    @foreach (var booking in bookings.OrderBy(b => b.Date).ThenBy(b => b.TimeSlot))
                    {
                        <div class="booking-card">
                            <div class="booking-header">
                                <div class="booking-date">
                                    <div class="date-day">@booking.Date.Day</div>
                                    <div class="date-month">@Constants.GetThaiMonth(booking.Date.Month)</div>
                                </div>
                            </div>
                            
                            <div class="booking-details">
                                <div class="detail-row">
                                    <span class="detail-icon">‚è∞</span>
                                    <span class="detail-text">@booking.TimeSlot ‡∏ô.</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-icon">üë§</span>
                                    <span class="detail-text">@booking.CustomerName</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-icon">üíÜ‚Äç‚ôÄÔ∏è</span>
                                    <span class="detail-text">@booking.MasseurName</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-icon">üìû</span>
                                    <span class="detail-text">@booking.PhoneNumber</span>
                                </div>
                                @if (!string.IsNullOrEmpty(booking.Pincode))
                                {
                                    <div class="detail-row pincode-row">
                                        <span class="detail-icon">üîê</span>
                                        <span class="detail-text">‡∏£‡∏´‡∏±‡∏™: @booking.Pincode</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Booking> bookings = new();
    private int selectedMonth = DateTime.Now.Month;
    private int selectedYear = DateTime.Now.Year;
    private int currentYear = DateTime.Now.Year;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Don't check login here due to static rendering
        await LoadBookings();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user is logged in (after render when JS is available)
            var isLoggedIn = await IsUserLoggedInAsync();
            if (!isLoggedIn)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            StateHasChanged();
        }
    }

    private async Task LoadBookings()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            bookings = await BookingService.GetBookingsByMonthAsync(selectedYear, selectedMonth);
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ: {ex.Message}";
            bookings = new List<Booking>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnDateChanged()
    {
        await LoadBookings();
    }

    private void GoToBooking()
    {
        Navigation.NavigateTo("/home");
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "status-confirmed",
            "completed" => "status-completed",
            "cancelled" => "status-cancelled",
            _ => "status-pending"
        };
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
            "completed" => "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
            "cancelled" => "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            _ => "‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
        };
    }

    private async Task<bool> IsUserLoggedInAsync()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            return !string.IsNullOrEmpty(userId);
        }
        catch
        {
            return false;
        }
    }
}