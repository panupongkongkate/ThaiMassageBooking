@page "/home"
@page "/"
@using MassageBooking.Models
@using MassageBooking.Services
@inject BookingService BookingService
@inject MasseurService MasseurService
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î</PageTitle>

<div class="home-container">
    <!-- Header Section (like Flutter) -->
    <div class="header-section">
        <div class="spa-icon">üíÜ‚Äç‚ôÄÔ∏è</div>
        <h1 class="header-title">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î</h1>
        <p class="header-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>
    </div>

    <div class="booking-form-container">
        <form class="booking-form" @onsubmit="SubmitBooking" @onsubmit:preventDefault="true">
            
            <!-- Date Selection (Flutter style) -->
            <div class="section">
                <h3 class="section-title">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</h3>
                <div class="date-card" @onclick="ShowDatePicker">
                    <div class="card-icon">üìÖ</div>
                    <div class="card-content">
                        <span class="date-text">@selectedDate.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="card-arrow">‚ùØ</div>
                </div>
            </div>

            <!-- Customer Name -->
            <div class="section">
                <h3 class="section-title">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á</h3>
                <div class="input-group">
                    <div class="input-icon">üë§</div>
                    <input type="text" class="form-input" @bind="customerName" 
                           placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" required 
                           minlength="2" maxlength="100" 
                           pattern="[‡∏Å-‡πôa-zA-Z\s]+" 
                           title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© 2-100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)" />
                </div>
                @if (!string.IsNullOrEmpty(customerName) && !IsValidName(customerName))
                {
                    <div class="validation-error">‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 2-100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</div>
                }
            </div>

            <!-- Phone Number -->
            <div class="section">
                <h3 class="section-title">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</h3>
                <div class="input-group">
                    <div class="input-icon">üìû</div>
                    <input type="tel" class="form-input" @bind="phoneNumber" 
                           placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏ä‡πà‡∏ô 0812345678)" required 
                           pattern="[0-9]{10}" 
                           minlength="10" maxlength="10"
                           title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å" />
                </div>
                @if (!string.IsNullOrEmpty(phoneNumber) && !IsValidPhoneNumber(phoneNumber))
                {
                    <div class="validation-error">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 0812345678</div>
                }
            </div>

            <!-- Masseur Selection -->
            <div class="section">
                <h3 class="section-title">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î</h3>
                @if (isLoadingMasseurs)
                {
                    <div class="loading-dropdown">
                        <div class="input-icon">‚è≥</div>
                        <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î...</span>
                    </div>
                }
                else
                {
                    <div class="input-group">
                        <div class="input-icon">üë©‚Äç‚öïÔ∏è</div>
                        <select class="form-select" @bind="selectedMasseur" required>
                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î --</option>
                            @foreach (var masseur in masseurNames)
                            {
                                <option value="@masseur">@masseur</option>
                            }
                        </select>
                    </div>
                }
            </div>

            <!-- Time Selection -->
            <div class="section">
                <h3 class="section-title">‡πÄ‡∏ß‡∏•‡∏≤</h3>
                <div class="input-group">
                    <div class="input-icon">‚è∞</div>
                    <select class="form-select" @bind="selectedTimeSlot" required>
                        @foreach (var timeSlot in Constants.TimeSlots)
                        {
                            <option value="@timeSlot">@timeSlot</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="submit-section">
                <button type="submit" class="submit-btn" disabled="@(isSubmitting || !IsFormValid())">
                    @if (isSubmitting)
                    {
                        <span class="btn-spinner"></span>
                        <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏á...</span>
                    }
                    else
                    {
                        <span>‡∏à‡∏≠‡∏á‡πÄ‡∏•‡∏¢</span>
                    }
                </button>
            </div>

        </form>
    </div>
</div>

<!-- Success Modal (‡πÅ‡∏ö‡∏ö SnackBar) -->
@if (showSuccessModal)
{
    <div class="snackbar @(showSuccessModal ? "show" : "")">
        <div class="snackbar-content">
            <div class="success-icon">‚úÖ</div>
            <div class="snackbar-text">
                <strong>‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong> ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á: @bookingPincode<br>
                @customerName ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà @selectedDate.ToString("dd/MM/yyyy")
            </div>
        </div>
    </div>
}

<!-- Error Modal -->
@if (showErrorModal)
{
    <div class="modal-overlay" @onclick="CloseErrorModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <div class="modal-icon error">‚ö†Ô∏è</div>
                <h3 class="modal-title">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
                <button type="button" class="modal-close" @onclick="CloseErrorModal">√ó</button>
            </div>
            <div class="modal-body">
                <p>@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-modal-ok" @onclick="CloseErrorModal">‡∏ï‡∏Å‡∏•‡∏á</button>
            </div>
        </div>
    </div>
}

@code {
    private DateTime selectedDate = DateTime.Now;
    private string customerName = string.Empty;
    private string phoneNumber = string.Empty;
    private string selectedMasseur = string.Empty;
    private string selectedTimeSlot = Constants.TimeSlots.First();

    private List<string> masseurNames = new();
    private bool isLoadingMasseurs = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;

    private bool showSuccessModal = false;
    private bool showErrorModal = false;
    private string bookingPincode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Don't check login here due to static rendering
        await LoadMasseurs();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user is logged in (after render when JS is available)
            var isLoggedIn = await IsUserLoggedInAsync();
            if (!isLoggedIn)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            StateHasChanged();
        }
    }

    private async Task<bool> IsUserLoggedInAsync()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            Console.WriteLine($"[HOME DEBUG] UserId from session: {userId}");
            var isLoggedIn = !string.IsNullOrEmpty(userId);
            Console.WriteLine($"[HOME DEBUG] IsLoggedIn: {isLoggedIn}");
            return isLoggedIn;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[HOME DEBUG] Error checking login: {ex.Message}");
            return false;
        }
    }

    private async Task LoadMasseurs()
    {
        try
        {
            isLoadingMasseurs = true;
            masseurNames = await MasseurService.GetMasseurNamesAsync();
            
            // Set first masseur as default like Flutter
            if (masseurNames.Count > 0)
            {
                selectedMasseur = masseurNames.First();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î‡πÑ‡∏î‡πâ: {ex.Message}";
            showErrorModal = true;
        }
        finally
        {
            isLoadingMasseurs = false;
        }
    }

    private async Task ShowDatePicker()
    {
        try
        {
            // Use JavaScript date picker
            var result = await JSRuntime.InvokeAsync<string>("prompt", 
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (dd/mm/yyyy):", selectedDate.ToString("dd/MM/yyyy"));
            
            if (!string.IsNullOrEmpty(result))
            {
                if (DateTime.TryParseExact(result, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out var newDate))
                {
                    if (newDate >= DateTime.Now.Date)
                    {
                        selectedDate = newDate;
                        StateHasChanged();
                    }
                }
            }
        }
        catch
        {
            // Fallback: do nothing if JS fails
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(customerName) &&
               !string.IsNullOrWhiteSpace(phoneNumber) &&
               !string.IsNullOrWhiteSpace(selectedMasseur) &&
               !string.IsNullOrWhiteSpace(selectedTimeSlot) &&
               IsValidName(customerName) &&
               IsValidPhoneNumber(phoneNumber);
    }

    private bool IsValidName(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return false;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 2-100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        if (name.Trim().Length < 2 || name.Trim().Length > 100) return false;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return System.Text.RegularExpressions.Regex.IsMatch(name, @"^[‡∏Å-‡πôa-zA-Z\s]+$");
    }

    private bool IsValidPhoneNumber(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return false;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å
        return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10}$");
    }

    private async Task SubmitBooking()
    {
        if (!IsFormValid() || isSubmitting)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            var booking = new BookingRequest
            {
                Date = selectedDate,
                CustomerName = customerName.Trim(),
                PhoneNumber = phoneNumber.Trim(),
                MasseurName = selectedMasseur,
                TimeSlot = selectedTimeSlot
            };

            var response = await BookingService.AddBookingAsync(booking);
            
            if (response != null && response.Success)
            {
                bookingPincode = response.Pincode;
                
                // Send LINE notification
                try
                {
                    var userId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
                    if (!string.IsNullOrEmpty(userId))
                    {
                        var message = $"‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n" +
                                    $"‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á: {bookingPincode}\n" +
                                    $"‡∏ä‡∏∑‡πà‡∏≠: {customerName}\n" +
                                    $"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {selectedDate:dd/MM/yyyy}\n" +
                                    $"‡πÄ‡∏ß‡∏•‡∏≤: {selectedTimeSlot}\n" +
                                    $"‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î: {selectedMasseur}";
                        
                        await ApiService.SendMessageAsync(userId, message);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to send LINE notification: {ex.Message}");
                }
                
                // Show snackbar success (like Flutter)
                showSuccessModal = true;
                StateHasChanged();
                
                // Hide after 5 seconds
                await Task.Delay(5000);
                showSuccessModal = false;
                StateHasChanged();

                // Reset form (like Flutter)
                ResetForm();
            }
            else
            {
                errorMessage = response?.Message ?? "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß";
                showErrorModal = true;
                Console.WriteLine($"[HOME DEBUG] Setting error message: {errorMessage}");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}";
            showErrorModal = true;
            StateHasChanged();
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ResetForm()
    {
        customerName = string.Empty;
        phoneNumber = string.Empty;
        selectedDate = DateTime.Now;
        selectedMasseur = masseurNames.Count > 0 ? masseurNames.First() : string.Empty;
        selectedTimeSlot = Constants.TimeSlots.First();
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
        errorMessage = string.Empty;
        StateHasChanged();
    }
}