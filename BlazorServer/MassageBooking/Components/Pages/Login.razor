@page "/login"
@using MassageBooking.Models
@using MassageBooking.Services
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="app-icon">
                <i class="spa-icon">üå∏</i>
            </div>
            <h1 class="app-title">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î</h1>
            <p class="app-subtitle">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢</p>
        </div>

        <div class="login-content">
            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner"></div>
                    <p class="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...</p>
                </div>
            }
            else
            {
                <div class="login-form">
                    <p class="login-description">
                        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ô‡∏ß‡∏î
                    </p>
                    
                    <button class="line-login-btn" @onclick="LoginWithLine" disabled="@isLoading">
                        <div class="btn-content">
                            <div class="line-icon">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.64 6.8c-.15 1.58-.8 5.42-1.13 7.19-.14.75-.42 1-.68 1.03-.58.05-1.02-.38-1.58-.75-.88-.58-1.38-.94-2.23-1.5-.99-.65-.35-1.01.22-1.59.15-.15 2.71-2.48 2.76-2.69.01-.03.01-.14-.07-.19-.08-.05-.19-.03-.27-.02-.11.02-1.8 1.14-5.1 3.35-.48.33-.92.49-1.3.48-.43-.01-1.25-.24-1.86-.44-.75-.24-1.35-.37-1.3-.78.03-.21.36-.43.98-.65 3.85-1.68 6.42-2.78 7.72-3.31 3.68-1.54 4.44-1.81 4.94-1.82.11 0 .35.03.51.16.13.11.17.25.19.35-.01.06.01.24-.01.37z"/>
                                </svg>
                            </div>
                            <span>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE</span>
                        </div>
                    </button>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">
                            <i class="error-icon">‚ö†Ô∏è</i>
                            <span>@errorMessage</span>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="login-footer">
            <p class="footer-text">
                ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö<br>
                <a href="#" class="footer-link">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</a> ‡πÅ‡∏•‡∏∞ 
                <a href="#" class="footer-link">‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</a>
            </p>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if already logged in
        var isLoggedIn = await IsUserLoggedInAsync();
        if (isLoggedIn)
        {
            Navigation.NavigateTo("/home");
        }
    }

    private async Task LoginWithLine()
    {
        try
        {
            Console.WriteLine("LoginWithLine method called!");
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Get LINE config from API or fallback to local config
            var config = await ApiService.GetLineConfigAsync();
            
            if (config == null)
            {
                // Fallback to appsettings.json config when API is not available
                var clientId = Configuration["LineConfig:ClientId"];
                var redirectUrl = Configuration["LineConfig:RedirectUrl"];
                
                if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(redirectUrl))
                {
                    errorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Login ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö";
                    return;
                }
                
                config = new LineConfig
                {
                    ClientId = clientId,
                    RedirectUrl = redirectUrl
                };
                
                Console.WriteLine("Using fallback LINE config from appsettings.json");
            }

            // Generate state for security
            var state = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds().ToString();
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "oauth_state", state);

            // Build LINE login URL
            var cleanRedirectUrl = config.RedirectUrl.TrimEnd('/');
            var loginUrl = $"https://access.line.me/oauth2/v2.1/authorize?" +
                          $"response_type=code" +
                          $"&client_id={config.ClientId}" +
                          $"&redirect_uri={Uri.EscapeDataString(cleanRedirectUrl)}" +
                          $"&state={state}" +
                          $"&scope=profile%20openid";

            // Redirect to LINE login
            Navigation.NavigateTo(loginUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<bool> IsUserLoggedInAsync()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            return !string.IsNullOrEmpty(userId);
        }
        catch
        {
            return false;
        }
    }

}